name: build-op9r-kernel-oos11.2.5.5

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch name'
        required: true
        type: choice
        default: 'main'
        options: 
        - 'oneplus/SM8250_R_11.0_9R'
        - 'main'

      kernel_link:
        description: 'Build Kerel Source link'
        required: true
        default: 'https://github.com/OnePlusOSS/android_kernel_oneplus_sm8250'

      kernel_branch:
        description: 'Build Kerel Branch'
        required: true
        default: 'oneplus/SM8250_R_11.0_9R'
        
      clang_link:
        description: 'Clang download link'
        required: true
        type: choice
        default: 'https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android11-release/clang-r383902b.tar.gz'
        options: 
        - 'https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android11-release/clang-r383902b.tar.gz'

      gcc_64_link:
        description: 'Gcc64 download link'
        required: true
        type: choice
        default: 'https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz'
        options: 
        - 'https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz'

      gcc_32_link:
        description: 'Gcc32 download link'
        required: true
        type: choice
        default: 'https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz'
        options: 
        - 'https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz'

      boot_link:
        description: 'Boot download link'
        required: true
        type: choice
        default: 'https://raw.githubusercontent.com/r8ter/bootgitlfs/main/oos11-boot-a.img'
        options: 
        - 'https://raw.githubusercontent.com/r8ter/bootgitlfs/main/oos11-boot-a.img'

      extra_cmds:
        description: 'Build Kerel Extra Cmds'
        required: true
        default: ' LLVM=1 LLVM_IAS=1 '

      kernel_config:
        description: 'Kernel Config File'
        required: true
        default: 'vendor/kona-perf_defconfig'

      extra_input:
        description: 'Extra inputs [enable_kernelsu|enable_ccache|change_kbuild]'
        required: true
        default: 'false|true|false'

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
    - name: use which branch
      run: |
        ls -alhF .

    - name: install packages
      run: |
        cd $GITHUB_WORKSPACE
        ls -alhF --color .
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        sudo apt update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Init Build Env
      run: |
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "DEVICE=kona" >> $GITHUB_ENV
        echo "DEVICE_NAME=OnePlus9R" >> $GITHUB_ENV
        echo "KERNEL_IMAGE_NAME=Image" >> $GITHUB_ENV
        echo "KERNEL_CONFIG=${{ github.event.inputs.kernel_config }}" >> $GITHUB_ENV

    - name: Download Clang-aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        wget -O clang.tar.gz ${{ github.event.inputs.clang_link }}
        tar -C clang-aosp/ -zxvf clang.tar.gz

    - name: Download Gcc-aosp
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir gcc-64
        wget -O gcc-aarch64.tar.gz ${{ github.event.inputs.gcc_64_link }}
        tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
        echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-" >> $GITHUB_ENV
        mkdir gcc-32
        wget -O gcc-arm.tar.gz ${{ github.event.inputs.gcc_32_link }}
        tar -C gcc-32/ -zxvf gcc-arm.tar.gz
        echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-" >> $GITHUB_ENV

    - name: Check clang as version
      run: |
        which as
        file $(which as)
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        which as
        file $(which as)
        echo "list all gcc-64 bin"
        cd $GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/
        ls -1p .| sed "s@^@$(pwd)/@"
        file *as
        cd $GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/
        ls -1p .| sed "s@^@$(pwd)/@"
        file *as

    - name: Download mkbootimg tools
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

    - name: Download source boot image
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget -O boot-source.img ${{ github.event.inputs.boot_link }}
        if [ -f boot-source.img ]; then
            echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
            echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
        fi

    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ github.event.inputs.kernel_link }} -b ${{ github.event.inputs.kernel_branch }} android-kernel --depth=1
        echo "LOCALVERSION=$(cat android-kernel/localversion)" >> $GITHUB_ENV
        echo "ENABLE_KERNELSU=$(echo ${{ github.event.inputs.enable_kernelsu }}|cut -d "|" -f 1)" >> $GITHUB_ENV
        echo "enable kernelsu ${{ env.ENABLE_KERNELSU }}"

    - name: Setup KernelSU
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        rm -rf KernelSU drivers/kernelsu
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "UPLOADNAME=-KernelSU_$KSU_VERSION" >> $GITHUB_ENV

    - name: Setup Configuration for Kernelsu
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        echo "CONFIG_MODULES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        du -hd 2 .
        df -h .
        df -h
        chmod +x -R *
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        cd android-kernel
        echo "make -j$(nproc --all) CC=clang O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- ${{ github.event.inputs.extra_cmds }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ github.event.inputs.kernel_config }}"
        make -j$(nproc --all) CC=clang O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- ${{ github.event.inputs.extra_cmds }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ github.event.inputs.kernel_config }}
        if [ $(echo ${{ github.event.inputs.enable_kernelsu }}|cut -d "|" -f 3) = true ]; then
          ls scripts/Kbuild.include && cp scripts/Kbuild.include scripts/Kbuild.include1
          sed -i "s/scripts\/basic\/fixdep/chmod +x -R . \&\& scripts\/basic\/fixdep/g" scripts/Kbuild.include
          diff scripts/Kbuild.include scripts/Kbuild.include1
        fi
        if [ $(echo ${{ github.event.inputs.enable_kernelsu }}|cut -d "|" -f 2) = true ]; then
            echo 'make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- ${{ github.event.inputs.extra_cmds }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} -B -w -s'
            make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- ${{ github.event.inputs.extra_cmds }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} -B -w -s
        else
            echo "make -j$(nproc --all) CC=clang O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- ${{ github.event.inputs.extra_cmds }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} -B -w -s"
            make -j$(nproc --all) CC=clang O=out ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- ${{ github.event.inputs.extra_cmds }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} -B -w -s
        fi
        ls -alhF --color out/arch/arm64/boot/

    - name: Check a kernel output files
      run: |
       cd $GITHUB_WORKSPACE/kernel_workspace
       ls -alhF android-kernel/out/arch/${{ env.ARCH }}/boot/
       if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} ]; then
           echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
       else
           echo "Kernel output file is empty"
           exit 1
       fi

    - name: Make Anykernel3
      if: env.CHECK_FILE_IS_OK == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md

    - name: Make boot image
      if: env.HAVE_SOURCE_BOOT_IMAGE == 'true' && env.CHECK_FILE_IS_OK == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        tools/unpack_bootimg.py --boot_img boot-source.img
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} out/kernel
        tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
        if [ -f boot.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "Boot image is empty"
            exit 1
        fi
        echo "CHECK_DTBO_IS_OK=false" >> $GITHUB_ENV

    - name: Upload ${{ env.KERNEL_IMAGE_NAME }}
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE_NAME }}-${{ env.KERNEL_IMAGE_NAME }}${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}

    - name: Upload AnyKernel3
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE_NAME }}-AnyKernel3${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*

    - name: Upload DTBO image
      if: env.CHECK_DTBO_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE_NAME }}-dtbo-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img

    - name: Upload boot image
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.DEVICE_NAME }}-boot${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/boot.img
